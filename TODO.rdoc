=todo

==april 21 2014

calculate storage pods or 'datastore clusters'



@dc.networkFolder.childEntity.grep(RbVmomi::VIM::Folder).each {|x| x.childEntity.grep(RbVmomi::VIM::DistributedVirtualSwitch).each {|y| puts y.config} }



@dc.networkFolder.inventory.first[1].values[0].first.children[0].summary


@dc.networkFolder.inventory.first[1].values.each {|x| puts x.first.children[0].summary.productInfo.vendor}


inventory.first[1].values.each {|x| x[0].childEntity.grep(RbVmomi::VIM::DistributedVirtualSwitch).each {|y| puts y.summary.props} }






h1['config.network'][:pnic].each { |x| pnic << [ x[:device], x[:mac], x[:linkSpeed][:speedMb] ] }



# getting host sensor readings: 
host_sensors.each do |k,v| temp_array = []; type = k; v.each do |set| temp_array << { :name => set.name, :key => set.healthState[:key], :summary => set.healthState[:summary], :currentReading => "#{set.currentReading} #{set.baseUnits}" } end; host_sensor_values[type] = temp_array end

# 5-18-2014 ##########################################

map 'words' (word_salad, ohm_objects, x_props) list to vcenter api object type names, then have ohm objects dynamically created on startup

group 'buckets' into classes
methods to call bucket classes when added and retrieving

sub-divide vnetwork bucket into vswitch and vportgroup

add vswitch/vportgroup info/stats

add host vnic info/stats - done

add query usage to api

configure instance to connect to specific client per options - sort of done. main exec / vcenter_get_data use this, need to update api

use threads when grabbing data - at least 2x dc per run

check similar errros; W, [2014-05-18T03:34:02.141926 #31187]  WARN -- VcenterConnect#rescue in block in build_tree: UniqueIndexViolation: locationid - gfdf80000000021 already exists with id: 334 - avamarcombinedproxy-linux-sles11_64-7.0.101-61-vcsa0t1

configure data refresh time/locking

cleanup/consoldate vcenter api object collector

set integer types as needed in ohm objects

create methods in api to parse integers, do maths as needed
(bits to bytes, gt/lt, %, etc)


server_stuffs: 
create runtime user
set soft/hard fs /etc/security/limits.conf

add tcp_socket check before attempting to connect to vcenters


convert word_buckets from class var to instance var
api.rb:148: warning: class variable access from toplevel

a query like this seems to get caught in a loop, eating cpu/mem - 
curl "http://10.144.105.45:9494/syncopatedtech/vdc/isc/clusters/isc/hosts/isc/vnetworks/ss/vms"

vnetworks do not appear to be getting populated with vms...need to revisit using ohm 'lists' for this...relates to splitting vnetwork into vswitch and vportgroup

replace "x" vars with words

improve api sorting logic -some combo of bubble sort/selection sort/shell sort

utilize redis pipeline in api to retrieve multiple datasets at once
possibily use MULTI/EXEC to run a number of commands in an atomic fashion. This is similar to executing a pipeline, but the commands are preceded by a call to MULTI, and followed by a call to EXEC. Like the regular pipeline, the replies to the commands are returned by the #multi method.
